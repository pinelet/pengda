<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ws="http://jax-ws.dev.java.net/spring/core"
	xmlns:wss="http://jax-ws.dev.java.net/spring/servlet" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jaxrs="http://cxf.apache.org/jaxrs"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.0.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
	http://jax-ws.dev.java.net/spring/core
	http://jax-ws.dev.java.net/spring/core.xsd
	http://jax-ws.dev.java.net/spring/servlet
	http://jax-ws.dev.java.net/spring/servlet.xsd
	http://cxf.apache.org/jaxrs
    http://cxf.apache.org/schemas/jaxrs.xsd">

	<context:annotation-config />
	<context:property-placeholder location="classpath:resourcesconfig.properties" />
	<aop:aspectj-autoproxy />
	<import resource="app-security.xml" />
	<import resource="pengda-beans.xml" />
	<!-- cxf rs -->
	<bean id="payserver" class="com.pinelet.utp.core.handler.PayServerHandler"/>
	<jaxrs:server id="restServiceContainer" address="/pay">
		<jaxrs:serviceBeans>
			<ref bean="payserver"/>
		</jaxrs:serviceBeans>
	</jaxrs:server>
	<!-- interface main server -->
	<bean id="unionServerHandler" class="com.pinelet.utp.core.handler.unionServerHandler">

	</bean>
	<bean id="textCodecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
		<constructor-arg>
			<bean class="org.apache.mina.filter.codec.textline.TextLineCodecFactory">
				<constructor-arg>
					<bean class="java.nio.charset.Charset" factory-method="forName">
						<constructor-arg value="${utpdefault.charset}" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>

	<bean id="loggingFilter" class="org.apache.mina.filter.logging.LoggingFilter" />

	<!-- The filter chain. -->
	<bean id="filterChainBuilder"
		class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
		<property name="filters">
			<map>
				<entry key="loggingFilter" value-ref="loggingFilter" />
				<entry key="codecFilter" value-ref="textCodecFilter" />
			</map>
		</property>
	</bean>

	<bean class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		<property name="customEditors">
			<map>
				<entry key="java.net.SocketAddress">
					<bean class="org.apache.mina.integration.beans.InetSocketAddressEditor" />
				</entry>
			</map>
		</property>
	</bean>
	<!-- mina session config ,因为管理功能开发，暂时关闭此功能 -->
	<bean id="sessionconfig" factory-bean="portalAcceptor"
		factory-method="getSessionConfig">
		<property name="bothIdleTime" value="3000" />
		<property name="readBufferSize" value="1024" />
	</bean>
	<!-- The IoAcceptor which binds to port 9920 ,因为管理功能开发，暂时关闭此功能 -->
	<bean id="portalAcceptor" class="org.apache.mina.transport.socket.nio.NioSocketAcceptor"
		init-method="bind" destroy-method="unbind">
		<property name="defaultLocalAddress" value="${utpserver.ip}:${utpserver.port}" />
		<property name="handler" ref="unionServerHandler" />
		<property name="filterChainBuilder" ref="filterChainBuilder" />
	</bean>
	<!-- database -->

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}"></property>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"></property>
		<property name="maxActive" value="${jdbc.maxActive}"></property>
		<property name="initialSize" value="${jdbc.initialSize}"></property>
		<property name="maxWait" value="${jdbc.maxWait}"></property>
		<property name="maxIdle" value="${jdbc.maxIdle}"></property>
		<property name="minIdle" value="${jdbc.minIdle}"></property>
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}"></property>
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"></property>
		<property name="validationQuery" value="SELECT 1 FROM DUAL"></property>
	</bean>


	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation"
			value="classpath:com/pinelet/utp/dao/SqlMapConfig.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Dao -->

	<bean id="abstractDAO" abstract="true">
		<property name="sqlMapClient" ref="sqlMapClient" />
	</bean>


	<!--纯粹的JDBC事务管理器, 框架使用JTA事务，该选项一般不打开，缺省下打开是考虑支持所有的应用服务器 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- spring声明式事务的配置 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 读取数据方法，一般采用只读事务 -->
			<tx:method name="get*" isolation="DEFAULT" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="select*" isolation="DEFAULT" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="query*" isolation="DEFAULT" propagation="SUPPORTS"
				read-only="true" />
			<tx:method name="count*" isolation="DEFAULT" propagation="SUPPORTS"
				read-only="true" />

			<!--其他方法，如save，update，insert等对数据库进行写入操作的方法，当产生MisException进行回滚 -->
			<tx:method name="insert*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
			<tx:method name="update*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
			<tx:method name="save*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
			<tx:method name="add*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
			<tx:method name="del*" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
			<tx:method name="process" isolation="DEFAULT" read-only="false"
				propagation="REQUIRED" rollback-for="UtpException" />
		</tx:attributes>
	</tx:advice>


	<aop:config>
		<aop:pointcut id="serviceOperation"
			expression="execution(* com.pinelet.utp.manage..*Manage.*(..)) || execution(* com.pinelet.utp.core.service.*.process(..))" />
		<aop:advisor pointcut-ref="serviceOperation" advice-ref="txAdvice" />
	</aop:config>


</beans>