package com.pinelet.utp.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PersonrelExample {
    /**
     * This field was generated by CreditEase ibator-extending.
     * This field corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by CreditEase ibator-extending.
     * This field corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public PersonrelExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    protected PersonrelExample(PersonrelExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by CreditEase ibator-extending.
     * This method corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by CreditEase ibator-extending.
     * This class corresponds to the database table personrel
     *
     *  Sun Jan 13 16:31:41 CST 2013
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andOrgnoIsNull() {
            addCriterion("orgno is null");
            return this;
        }

        public Criteria andOrgnoIsNotNull() {
            addCriterion("orgno is not null");
            return this;
        }

        public Criteria andOrgnoEqualTo(String value) {
            addCriterion("orgno =", value, "orgno");
            return this;
        }

        public Criteria andOrgnoNotEqualTo(String value) {
            addCriterion("orgno <>", value, "orgno");
            return this;
        }

        public Criteria andOrgnoGreaterThan(String value) {
            addCriterion("orgno >", value, "orgno");
            return this;
        }

        public Criteria andOrgnoGreaterThanOrEqualTo(String value) {
            addCriterion("orgno >=", value, "orgno");
            return this;
        }

        public Criteria andOrgnoLessThan(String value) {
            addCriterion("orgno <", value, "orgno");
            return this;
        }

        public Criteria andOrgnoLessThanOrEqualTo(String value) {
            addCriterion("orgno <=", value, "orgno");
            return this;
        }

        public Criteria andOrgnoLike(String value) {
            addCriterion("orgno like", value, "orgno");
            return this;
        }

        public Criteria andOrgnoNotLike(String value) {
            addCriterion("orgno not like", value, "orgno");
            return this;
        }

        public Criteria andOrgnoIn(List<String> values) {
            addCriterion("orgno in", values, "orgno");
            return this;
        }

        public Criteria andOrgnoNotIn(List<String> values) {
            addCriterion("orgno not in", values, "orgno");
            return this;
        }

        public Criteria andOrgnoBetween(String value1, String value2) {
            addCriterion("orgno between", value1, value2, "orgno");
            return this;
        }

        public Criteria andOrgnoNotBetween(String value1, String value2) {
            addCriterion("orgno not between", value1, value2, "orgno");
            return this;
        }

        public Criteria andPidIsNull() {
            addCriterion("pId is null");
            return this;
        }

        public Criteria andPidIsNotNull() {
            addCriterion("pId is not null");
            return this;
        }

        public Criteria andPidEqualTo(String value) {
            addCriterion("pId =", value, "pid");
            return this;
        }

        public Criteria andPidNotEqualTo(String value) {
            addCriterion("pId <>", value, "pid");
            return this;
        }

        public Criteria andPidGreaterThan(String value) {
            addCriterion("pId >", value, "pid");
            return this;
        }

        public Criteria andPidGreaterThanOrEqualTo(String value) {
            addCriterion("pId >=", value, "pid");
            return this;
        }

        public Criteria andPidLessThan(String value) {
            addCriterion("pId <", value, "pid");
            return this;
        }

        public Criteria andPidLessThanOrEqualTo(String value) {
            addCriterion("pId <=", value, "pid");
            return this;
        }

        public Criteria andPidLike(String value) {
            addCriterion("pId like", value, "pid");
            return this;
        }

        public Criteria andPidNotLike(String value) {
            addCriterion("pId not like", value, "pid");
            return this;
        }

        public Criteria andPidIn(List<String> values) {
            addCriterion("pId in", values, "pid");
            return this;
        }

        public Criteria andPidNotIn(List<String> values) {
            addCriterion("pId not in", values, "pid");
            return this;
        }

        public Criteria andPidBetween(String value1, String value2) {
            addCriterion("pId between", value1, value2, "pid");
            return this;
        }

        public Criteria andPidNotBetween(String value1, String value2) {
            addCriterion("pId not between", value1, value2, "pid");
            return this;
        }
    }
}